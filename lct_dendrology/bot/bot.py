from __future__ import annotations
from PIL import Image, ImageDraw, ImageFont

import io
import pandas as pd
import asyncio
import logging
from typing import Final

import aiohttp
from telegram import Update
from telegram.ext import (
    AIORateLimiter,
    Application,
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

from lct_dendrology.cfg import settings


# Configure logging
logger = logging.getLogger(__name__)

# Configuration
STUB_TEXT: Final[str] = "–ó–∞–≥–ª—É—à–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –¢–µ–∫—Å—Ç –±—É–¥–µ—Ç –∑–¥–µ—Å—å."
SERVER_URL: Final[str] = f"http://{settings.backend_host}:{settings.backend_port}"
TIMEOUT: Final[int] = 30  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏


async def send_image_to_server(image_data: bytes, filename: str) -> dict:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    
    Args:
        image_data: –ë–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        filename: –ò–º—è —Ñ–∞–π–ª–∞
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        
    Raises:
        Exception: –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
    """
    async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=TIMEOUT)) as session:
        data = aiohttp.FormData()
        data.add_field('file', image_data, filename=filename, content_type='image/jpeg')
        
        try:
            async with session.post(f"{SERVER_URL}/process-image", data=data) as response:
                if response.status == 200:
                    result = await response.json()
                    logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–º: {filename}")
                    return result
                else:
                    error_text = await response.text()
                    logger.error(f"–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É {response.status}: {error_text}")
                    raise Exception(f"–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É {response.status}")
                    
        except asyncio.TimeoutError:
            logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É")
            raise Exception("–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ")
        except aiohttp.ClientError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {str(e)}")
            raise Exception("–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")


def draw_bboxes_with_ids(image_bytes: bytes, analysis: dict) -> io.BytesIO:
    """
    –ù–∞–Ω–æ—Å–∏—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ bbox-—ã —Å id –æ–±—ä–µ–∫—Ç–æ–≤.
    Args:
        image_bytes: –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∞–π—Ç–∞—Ö
        analysis: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ (dict)
    Returns:
        BytesIO —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    """
    img = Image.open(io.BytesIO(image_bytes)).convert("RGB")
    draw = ImageDraw.Draw(img)
    detections = analysis.get('detections', [])
    # –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç
    try:
        font = ImageFont.truetype("arial.ttf", 26)
    except Exception:
        font = ImageFont.load_default()

    for det in detections:
        bbox = det.get('bbox')
        obj_id = det.get('id')
        if bbox:
            xy = [bbox['x1'], bbox['y1'], bbox['x2'], bbox['y2']]
            draw.rectangle(xy, outline="green", width=2)
            # –ü–æ–¥–ø–∏—Å—å id –≤–Ω—É—Ç—Ä–∏ bbox (–ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª + –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø)
            text_x = bbox['x1'] + 3
            text_y = bbox['y1'] + 3
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
            bbox_text = font.getbbox(f"{obj_id}")
            text_width = bbox_text[2] - bbox_text[0]
            text_height = bbox_text[3] - bbox_text[1]
            # –†–∏—Å—É–µ–º —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –±–µ–ª—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –ø–æ–¥ —Ç–µ–∫—Å—Ç–æ–º
            rect_x1 = text_x - 2
            rect_y1 = text_y - 2
            rect_x2 = text_x + text_width + 6
            rect_y2 = text_y + text_height + 4
            draw.rectangle([rect_x1, rect_y1, rect_x2, rect_y2], fill="white")
            # –†–∏—Å—É–µ–º –∑–µ–ª–µ–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–≤–µ—Ä—Ö
            draw.text((text_x + 2, text_y + 1), f"{obj_id}", fill="green", font=font)
    output = io.BytesIO()
    img.save(output, format="JPEG")
    output.seek(0)
    return output


def format_analysis_result(analysis: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    Args:
        analysis: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∞–Ω–∞–ª–∏–∑–∞
    Returns:
        –°—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    detections = analysis.get('detections', [])
    if not detections:
        return (
            "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:\n\n"
            "–û–±—ä–µ–∫—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."
        )
    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
    class_counts = {}
    for det in detections:
        name = det.get('class_name', 'unknown')
        class_counts[name] = class_counts.get(name, 0) + 1
    detected_list = "\n".join(
        [f"‚Ä¢ {cls}: {count}" for cls, count in class_counts.items()]
    )
    return (
        "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:\n\n"
        "–ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:\n"
        f"{detected_list}\n\n"
        f"–í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(detections)}"
    )


def analysis_to_excel(analysis: dict) -> io.BytesIO:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ Excel-—Ç–∞–±–ª–∏—Ü—É.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç BytesIO –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–∫ —Ñ–∞–π–ª.
    """
    detections = analysis.get('detections', [])
    if not detections:
        df = pd.DataFrame([{"–ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤": ""}])
    else:
        df = pd.DataFrame(detections)
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False, sheet_name="Detections")
    output.seek(0)
    return output


async def handle_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_message is None:
        return
    await update.effective_message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏."
    )


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_message is None:
        return
    
    # Photo sizes are sorted by file size, last is the biggest
    if not update.effective_message.photo:
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ
    processing_msg = await update.effective_message.reply_text(
        "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ..."
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        photo = update.effective_message.photo[-1]
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await context.bot.get_file(photo.file_id)
        image_data = await file.download_as_bytearray()
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–º {len(image_data)} –±–∞–π—Ç")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        result = await send_image_to_server(
            bytes(image_data), 
            f"photo_{photo.file_id}.jpg"
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        analysis = result.get("analysis_result", {})
        # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º bbox-—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π
        marked_image = draw_bboxes_with_ids(bytes(image_data), analysis)
        await update.effective_message.reply_photo(
            photo=marked_image,
            caption="üñºÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã (bbox + id)"
        )
        if analysis.get('inference_enabled') is True:
            response_text = format_analysis_result(analysis)
            await processing_msg.edit_text(response_text)
            if getattr(settings, "send_excel_result", True):
                excel_file = analysis_to_excel(analysis)
                await update.effective_message.reply_document(
                    document=excel_file,
                    filename="analysis.xlsx",
                    caption="üìÑ –¢–∞–±–ª–∏—Ü–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞"
                )
        else:
            # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π (–∑–∞–≥–ª—É—à–∫–∞), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            response_text = (
                "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ!\n\n"
                "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:\n"
                f"‚Ä¢ –†–∞–∑–º–µ—Ä: {result.get('file_size', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} –±–∞–π—Ç\n"
                f"‚Ä¢ –¢–∏–ø: {result.get('content_type', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
                "ü§ñ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –∑–∞–≥–ª—É—à–∫–∏. "
                "–†–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏."
            )
            await processing_msg.edit_text(response_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_message = (
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ –°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
            "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É\n"
            "‚Ä¢ –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
        )
        
        await processing_msg.edit_text(error_message)


def create_application(token: str) -> Application:
    """Create and configure the Telegram Application instance."""
    application = (
        ApplicationBuilder()
        .token(token)
        .rate_limiter(AIORateLimiter())
        .build()
    )

    application.add_handler(CommandHandler("start", handle_start))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    return application


async def run_polling(application: Application) -> None:
    """Start the bot using long polling."""
    await application.initialize()
    await application.start()
    try:
        await application.updater.start_polling()
        # Keep running until termination
        await application.updater.wait_for_stop()
    finally:
        await application.stop()
        await application.shutdown()


